# Slack Configuration
# Required: Your Slack Bot User OAuth Token
# Get this from: https://api.slack.com/apps -> Your App -> OAuth & Permissions
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token-here

# Required: Your Slack Signing Secret
# Get this from: https://api.slack.com/apps -> Your App -> Basic Information
SLACK_SIGNING_SECRET=your-slack-signing-secret-here

# OAuth Configuration (Sign in with Slack)
# Required: Your Slack OAuth Client ID
# Get this from: https://api.slack.com/apps -> Your App -> Basic Information
SLACK_CLIENT_ID=your-slack-client-id-here

# Required: Your Slack OAuth Client Secret
# Get this from: https://api.slack.com/apps -> Your App -> Basic Information
SLACK_CLIENT_SECRET=your-slack-client-secret-here

# Optional: OAuth Redirect URI (defaults to API_URL/auth/slack/callback)
# SLACK_OAUTH_REDIRECT_URI=https://localhost/auth/slack/callback

# Linear Configuration
# Required: Your Linear API Key
# Get this from: https://linear.app/settings/api
LINEAR_API_KEY=lin_api_your-linear-api-key-here

# GitHub Configuration (Optional)
# GitHub App OAuth - allows users to connect their own GitHub accounts
# Get these from: https://github.com/settings/apps -> Your App -> General
# Required scopes: repo, read:user, user:email
# See GITHUB_OAUTH_SETUP.md for detailed setup instructions
GITHUB_APP_CLIENT_ID=Iv1.your-github-app-client-id
GITHUB_APP_CLIENT_SECRET=your-github-app-client-secret

# Optional: OAuth Redirect URI (defaults to API_URL/auth/github/callback)
# GITHUB_OAUTH_REDIRECT_URI=https://localhost/auth/github/callback

# Optional: Shared GitHub Personal Access Token (fallback for users who haven't connected)
# Get this from: https://github.com/settings/tokens
# Required scopes: repo, read:user, user:email
# GITHUB_TOKEN=ghp_your-personal-access-token-here

# Database Configuration
# Path to SQLite database file
# Default: /data/rundown.db (inside container)
# For local development, you might use: ./data/rundown.db
DATABASE_PATH=/data/rundown.db

# Server Configuration
# Port the API server will listen on (Caddy proxies to this in development)
PORT=3001

# Application Environment
# Options: production, development, test
NODE_ENV=production

# Scheduling Configuration
# Cron expression for weekly report generation
# Default: "0 9 * * 1" (Every Monday at 9:00 AM)
# Format: "minute hour day-of-month month day-of-week"
# Examples:
#   "0 9 * * 1" = Every Monday at 9:00 AM
#   "0 14 * * 5" = Every Friday at 2:00 PM
#   "30 8 * * 1-5" = Weekdays at 8:30 AM
REPORT_SCHEDULE=0 9 * * 1

# Logging Configuration
# Log level for application logging
# Options: error, warn, info, debug
LOG_LEVEL=info

# Security Configuration
# JWT Secret (generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
# Required: Must be at least 32 characters
JWT_SECRET=your-64-character-hex-key-here-for-jwt

# Admin interface encryption key (generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
# Required to use encrypted configuration storage in admin interface
ENCRYPTION_KEY=your-64-character-hex-key-here

# API Configuration
# Base URL for the API server (used for OAuth redirects)
# In development: Caddy serves on https://localhost (standard port 443)
# In production: Your actual domain (e.g., https://your-domain.com)
API_URL=https://localhost